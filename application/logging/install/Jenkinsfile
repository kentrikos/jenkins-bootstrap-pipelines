#!groovy

import groovy.json.JsonOutput

library 'kentrikos-shared-library'
pipeline {

    agent any

    parameters {
        choice(name: 'K8S_FLAVOR', choices: ["eks", "kops"],
                description: 'Choose type of Kubernetes cluster (required for kops)')
    }
    environment {
        SUB_COMPONENT = "logging"
        OPERATION_DIR = "application/$AWS_REGION/$SUB_COMPONENT"

        GIT_URI = "https://github.com/kentrikos/fluentd-aws-elasticsearch.git"

        APP_NAME = 'fluentd-elasticsearch'
        ECR_REPO_NAME = "$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE/$APP_NAME"
        ECR_REPO = "$AWS_OPERATIONS_ACCOUNT_NUMBER" + ".dkr.ecr." + "$AWS_REGION" + ".amazonaws.com/$ECR_REPO_NAME"
    }
    
    stages {
        stage('Grant Cross-Account access to ECR') {
            steps {
                withProxyEnv() {
                    script {
                        def ecrPolicyJSON = """
                        {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "AllowPull",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecr:BatchGetImage",
                                        "ecr:GetDownloadUrlForLayer"
                                    ],
                                    "Principal": {
                                        "AWS": ["arn:aws:iam::${AWS_APPLICATION_ACCOUNT_NUMBER}:root"]
                                    }
                                }
                            ]
                        }
                        """
                        writeFile file: 'ecr_policy.json', text: ecrPolicyJSON

                        sh(script: "aws ecr get-repository-policy --region ${AWS_REGION} --repository-name ${ECR_REPO_NAME} || aws ecr set-repository-policy --region ${AWS_REGION} --repository-name ${ECR_REPO_NAME} --policy-text \"\$(cat ecr_policy.json)\"", returnStdout: true)
                    }
                }
            }
        }
        stage('Retrieve ElasticSearch endpoint') {
            steps {
                withProxyEnv() {
                    script {                    
                        ES_ENDPOINT = sh(script: "aws es describe-elasticsearch-domain --domain-name $AWS_REGION-$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE --query 'DomainStatus.Endpoints' --output text  --region $AWS_REGION", returnStdout: true)
                    }
                }
            }
        }
        stage('Git clone') {
            steps {
                gitCloneConfigRepo()
            }
        }
        stage('Switch K8S context') {
            steps {
                kubectlSwitchContextApp()
            }
        }
        stage('Init') {
            steps {
                terraformInitApplication dir: "$OPERATION_DIR", subcomponent: "$SUB_COMPONENT", withAWS: true
            }
        }
        stage('Plan') {
            steps {
                script {
                    K8S_CLUSTER_NAME = sh(script: "kubectl config current-context", returnStdout: true).trim()
                    terraformPlan dir: "$OPERATION_DIR", extraArgs: "-var=\"cluster_context=${K8S_CLUSTER_NAME}\" -var=\"elasticsearch_endpoint=${ES_ENDPOINT}\"  -var=\"fluentd_image_repository=${ECR_REPO}\" -var=\"fluentd_image_tag=latest\" -var=\"cluster_type=${K8S_FLAVOR}\"", withAWS: true
                }
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                terraformApply dir: "$OPERATION_DIR", withAWS: true
            }
        }
    }
}