#!groovy
pipeline {

    agent any
    stages {

        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }
        stage('Init') {
            steps {
                dir("application/$AWS_REGION/iam") {
                    withProxyEnv() {
                        sshagent(['bitbucket-key']) {
                            sh '/usr/bin/terraform init -input=false'
                        }
                    }
                }
            }
        }
        stage('Plan') {
            steps {
                dir("application/$AWS_REGION/iam") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '/usr/bin/terraform plan -var-file="../terraform.tfvars" -out=tfplan -input=false'
                        }
                    }
                }
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                dir("application/$AWS_REGION/iam") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '/usr/bin/terraform apply -var-file="../terraform.tfvars" -input=false tfplan'
                        }
                    }
                    archiveArtifacts artifacts: 'outputs/**'
                }
            }
        }
    }
}
void withProxyEnv(List envVars = [],  def body) {
    List proxies =[]
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'absolute', path: '/proxy', recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPs) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)

    withEnv(envVaraibles) {
        body.call()
    }
}