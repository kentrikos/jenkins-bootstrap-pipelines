#!groovy
pipeline {
    agent any
    environment {
        ENV_K8S_DIR = 'env-eks'
    }
    stages {
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }
        stage('Init') {
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    withProxyEnv() {
                        withAWS(role: "$CROSS_ACCOUNT_ROLE_NAME", roleAccount: "$AWS_APPLICATION_ACCOUNT_NUMBER") {
                            sshagent(['bitbucket-key']) {
                                sh '''#!/bin/bash -x
                                terraform init -input=false \
                                -backend-config="region=${AWS_REGION}" \
                                -backend-config="bucket=tf-${AWS_OPERATIONS_ACCOUNT_NUMBER}-app-${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}" \
                                -backend-config="dynamodb_table=tf-state-lock-bootstrap-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}" \
                                -backend-config="key=tf/tf-aws-product-domain-${PRODUCT_DOMAIN_NAME}-env-${ENVIRONMENT_TYPE}/${ENV_K8S_DIR}/terraform.tfstate"
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('Plan') {
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            withAWS(role: "$CROSS_ACCOUNT_ROLE_NAME", roleAccount: "$AWS_APPLICATION_ACCOUNT_NUMBER") {
                                sh '/usr/bin/terraform plan -destroy -var-file="../terraform.tfvars" -out=tfplandestroy -input=false'
                            }
                        }
                    }
                }
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            withAWS(role: "$CROSS_ACCOUNT_ROLE_NAME", roleAccount: "$AWS_APPLICATION_ACCOUNT_NUMBER") {
                                sh '/usr/bin/terraform apply -input=false tfplandestroy'
                            }
                        }
                    }
                }
            }
        }
    }
}
void withProxyEnv(List envVars = [], def body) {
    List proxies = []
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'relative', path: "/$PRODUCT_DOMAIN_NAME/$ENVIRONMENT_TYPE", recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPs) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)

    withEnv(envVaraibles) {
        body.call()
    }
}
