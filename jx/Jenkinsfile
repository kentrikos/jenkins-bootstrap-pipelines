#!groovy
def helmRbacConfig = '''
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
'''

def ingValue = '''
rbac:
 create: true

controller:
 service:
   annotations:
     service.beta.kubernetes.io/aws-load-balancer-type: nlb
     service.beta.kubernetes.io/aws-load-balancer-internal: true
   enableHttp: true
   enableHttps: false
'''
pipeline {

    agent any
    stages {
        stage('Git local config') {
            steps {
                sh 'git config --global --add user.name "example"'
                sh 'git config --global --add user.email "example@example.com"'
            }
        }
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }
        stage('Init helm') {
            steps {
                dir("ops/$AWS_REGION/env") {
                    withProxyEnv() {
                        writeFile file: 'helm-rbac-config.yaml', text: helmRbacConfig
                        sh 'kubectl create -f helm-rbac-config.yaml ||true'
                        sh 'helm init --service-account tiller --wait --upgrade'
                    }
                }
            }
        }
        stage('Init k8s ingress') {
            steps {
                dir("ops/$AWS_REGION/env") {
                    withProxyEnv() {
                        writeFile file: 'ing-values.yaml', text: ingValue
                        sh 'helm install --wait --name jxing --namespace kube-system stable/nginx-ingress --set rbac.create=true --values ing-values.yaml||true'
                    }
                }
            }
        }
        stage('Init jx tool') {
            steps {
                dir("ops/$AWS_REGION/env") {
                    withProxyEnv() {
                        script {
                            def parameters = readYaml file: 'jenkins/parameters.yaml'
                            sh 'jx create git server --kind bitbucketserver --name BitBucket --url ' + parameters.gitBitbucketServer
                        }
                    }
                }
            }
        }
        stage('Manual create domain') {
            steps {
                input message: "Create an domain defained for jx installation in Route53. Should we continue?", ok: "Yes, we should."
            }
        }
        stage('Install jx on k8s') {
            steps {
                dir("ops/$AWS_REGION/env") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            script {
                                def parameters = readYaml file: 'jenkins/parameters.yaml'
                                sh 'jx install -b --headless --default-admin-password ' + parameters.defaultAdminPassword + ' --domain="' + parameters.jxDomain + '" --verbose=true --provider=kubernetes --no-default-environments --git-username=' + parameters.gitUsername + ' --git-api-token ' + parameters.gitApiToken + ' --git-provider-url="' + parameters.gitProviderUrl + '"'
                            }
                        }
                    }
                }
            }
        }

    }
}
void withProxyEnv(List envVars = [],  def body) {
    List proxies =[]
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'absolute', path: '/proxy', recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPs) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)

    withEnv(envVaraibles) {
        body.call()
    }
}