#!groovy


def grafanaPVCName = ""
def grafanaPVPatch = '''
spec:
    claimRef:
        uid:
'''

pipeline {

    agent any

    parameters {
        choice(name: 'K8S_FLAVOR', choices: ["eks", "kops"],
               description: 'Choose type of Kubernetes cluster (required for kops)')
        string(name: 'GRAFANA_PV', defaultValue: "",
               description: 'Name of existing PV to use for Grafana storage (usually "pvc-*"), leave empty if this is first deployment')
    }

    stages {
        stage('Git local config') {
            steps {
                sh 'git config --global --add user.name "example"'
                sh 'git config --global --add user.email "example@example.com"'
            }
        }
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }

        stage('Get K8s cluster flavor') {
            steps {
                script {
                    if (env.K8S_FLAVOR == "eks") {
                      K8S_CLUSTER_NAME = "arn:aws:eks:$AWS_REGION:$AWS_OPERATIONS_ACCOUNT_NUMBER:cluster/$AWS_REGION-$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE-ops"
                    } else {
                      K8S_CLUSTER_NAME = "$AWS_REGION-$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE-ops.k8s.local"
                    }
                    println K8S_CLUSTER_NAME
                }
            }
        }

        stage('Switch kubectl context to ops') {
            steps {
                dir("operations/$AWS_REGION/env-$K8S_FLAVOR") {
                    script {
                      sh "kubectl config use-context $K8S_CLUSTER_NAME"
                    }
                }
            }
        }

        stage('Check/create LMA namespace') {
            steps {
                dir("operations/$AWS_REGION/env-$K8S_FLAVOR") {
                    withProxyEnv() {
                        script {
                            sh '''
                            #!/bin/bash -x
                            if ! kubectl get namespace lma;
                            then 
                                echo "Namespace for LMA does not exist, creating..."
                                kubectl create namespace lma
                            fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                dir("operations/$AWS_REGION/env-$K8S_FLAVOR") {
                    withProxyEnv() {
                        script {
                            def grafana_parameters = readYaml file: 'grafana/parameters.yaml'
                            def jenkins_parameters = readYaml file: 'jenkins/parameters.yaml'

                            println "Getting domain name"
                            def r53DomainName = sh(script: "aws route53 get-hosted-zone --id " + jenkins_parameters.domainHostedZoneID + " --output text --query 'HostedZone.Name'", 
                                                   returnStdout: true).trim().replaceAll("\\.\$", "")
                            def grafana_address = "grafana." + jenkins_parameters.domainAliasPrefix + "." + r53DomainName

                            if (GRAFANA_PV) {
                                println "Restoring from existing PersistentVolume :"
                                grafanaPVCName = "grafana"
                                def grafanaPVC = """
                                apiVersion: v1
                                kind: PersistentVolumeClaim
                                metadata:
                                  annotations:
                                    volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
                                  finalizers:
                                  - kubernetes.io/pvc-protection
                                  labels:
                                    app: grafana
                                  name: grafana
                                  namespace: lma
                                spec:
                                  accessModes:
                                  - ReadWriteOnce
                                  resources:
                                    requests:
                                      storage: 10Gi
                                  storageClassName: gp2
                                  volumeName: $GRAFANA_PV
                                """
                                writeFile file: 'grafana-pvc.yaml', text: grafanaPVC
                                sh "kubectl -n lma delete pvc grafana || true"
                                sh "kubectl patch pv $GRAFANA_PV --patch '$grafanaPVPatch'"
                                sh "kubectl -n lma create -f grafana-pvc.yaml"
                            } else {
                                grafanaPVCName = ""
                            }
                            
                            sh """
                            #!/bin/bash
                            helm install --replace --wait --name grafana --namespace lma stable/grafana \
                            --set=ingress.enabled=true,ingress.hosts={$grafana_address},adminPassword=$grafana_parameters.defaultAdminPassword \
                            --set=persistence.enabled=true,persistence.existingClaim=$grafanaPVCName
                            """
                        }
                    }
                }
            }
        }
    }
}

void withProxyEnv(List envVars = [], def body) {
    List proxies = []
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'relative', path: "/$PRODUCT_DOMAIN_NAME/$ENVIRONMENT_TYPE", recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPS) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)
    withEnv(envVaraibles) {
        body.call()
    }
}
