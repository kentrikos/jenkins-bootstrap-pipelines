#!groovy

library 'kentrikos-shared-library'
pipeline {

    agent any

    parameters {
        choice(name: 'K8S_FLAVOR', choices: ["eks", "kops"],
               description: 'Choose type of Kubernetes cluster (required for kops)')
    }
    environment {
        OPERATION_DIR = "operations/$AWS_REGION/env-$K8S_FLAVOR"
    }
    stages {
        stage('Git clone') {
            steps {
                gitCloneConfigRepo()
            }
        }

        stage('Switch K8S context') {
            steps {
                kubectlSwitchContextOps()
            }
        }

        stage('Destroy Prometheus/operations') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            sh 'helm delete --purge prometheus-ops'
                        }
                    }
                }
            }
        }
        stage('Read Grafana endpoint') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            def jenkinsParameters = readYaml file: 'jenkins/parameters.yaml'
                            def grafanaParameters = readYaml file: 'grafana/parameters.yaml'

                            println "Getting domain name"
                            def r53DomainName = sh(script: "aws route53 get-hosted-zone --id " + jenkinsParameters.domainHostedZoneID + " --output text --query 'HostedZone.Name'", 
                                                   returnStdout: true).trim().replaceAll("\\.\$", "")
                            grafanaEndpoint = "grafana." + jenkinsParameters.domainAliasPrefix + "." + r53DomainName
                            grafanaAdminPassword = grafanaParameters.defaultAdminPassword
                        }
                    }
                }
            }
        }
        stage('Destroy Prometheus_ops data-source in Grafana') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            def prometheusDataSourceName = "Prometheus_ops"
                            sh "curl --verbose --user admin:${grafanaAdminPassword} http://${grafanaEndpoint}/api/datasources/name/${prometheusDataSourceName} -X DELETE -H 'Content-Type: application/json;charset=UTF-8'"
                        }
                    }
                }
            }
        }

        stage('Delete Prometheus/ops dashboard from Grafana') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            def grafanaDashboardUID = "kcops"
                            sh "curl --verbose --user admin:${grafanaAdminPassword} http://${grafanaEndpoint}/api/dashboards/uid/${grafanaDashboardUID} -X DELETE -H 'Content-Type: application/json;charset=UTF-8'"
                        }
                    }
                }
            }
        }
    }
}

