#!groovy

library 'kentrikos-shared-library'
pipeline {

    agent any

    parameters {
        choice(name: 'K8S_FLAVOR', choices: ["eks", "kops"],
                description: 'Choose type of Kubernetes cluster (required for kops)')
    }
    environment {
        OPERATION_DIR = "operations/$AWS_REGION/env-$K8S_FLAVOR"
    }
    stages {
        stage('Git clone') {
            steps {
                gitCloneConfigRepo()
            }
        }

        stage('Switch K8S context') {
            steps {
                kubectlSwitchContextOps()
            }
        }

        stage('Read DNS domain') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            def jenkinsParameters = readYaml file: 'jenkins/parameters.yaml'

                            println "Getting domain name"
                            def r53DomainName = sh(script: "aws route53 get-hosted-zone --id " + jenkinsParameters.domainHostedZoneID + " --output text --query 'HostedZone.Name'",
                                                   returnStdout: true).trim().replaceAll("\\.\$", "")
                            prometheusEndpoint = "prometheus." + jenkinsParameters.domainAliasPrefix + "." + r53DomainName
                            grafanaEndpoint = "grafana." + jenkinsParameters.domainAliasPrefix + "." + r53DomainName
                            alertmanagerEndpoint = "alertmanager." + jenkinsParameters.domainAliasPrefix + "." + r53DomainName
                        }
                    }
                }
            }
        }

        stage('Deploy Prometheus/ops') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            sh """
                            #!/bin/bash
                            helm upgrade  prometheus-ops stable/prometheus --install --wait --namespace lma \
                            --set=server.ingress.enabled=true,server.ingress.hosts={$prometheusEndpoint} \
                            --set=alertmanager.enabled=true --set=alertmanager.ingress.enabled=true --set=alertmanager.ingress.hosts={$alertmanagerEndpoint} \
                            -f ./prometheus/alertmanager.yml
                            """
                        }
                    }
                }
            }
        }
 
        stage('Add Prometheus/ops data-source to Grafana') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            def grafanaParameters = readYaml file: 'grafana/parameters.yaml'
                            def grafanaAdminPassword = grafanaParameters.defaultAdminPassword
                            def requestJson = """
                            {
                              "name": "Prometheus_ops",
                              "isDefault": false,
                              "type": "prometheus",
                              "url": "http://${prometheusEndpoint}",
                              "access": "proxy",
                              "basicAuth": true,
                              "basicAuthUser": "admin",
                              "basicAuthPassword": "admin"
                            }
                            """
                            sh "curl --verbose --user admin:${grafanaAdminPassword} http://${grafanaEndpoint}/api/datasources -X POST -H 'Content-Type: application/json;charset=UTF-8' --data-binary '${requestJson}'"
                        }
                    }
                }
            }
        }

        stage('Add Prometheus/ops dashboard to Grafana') {
            steps {
                dir("$OPERATION_DIR") {
                    withProxyEnv() {
                        script {
                            def grafanaParameters = readYaml file: 'grafana/parameters.yaml'
                            def grafanaAdminPassword = grafanaParameters.defaultAdminPassword
                            println "Downloading and adjusting dashboard:"
                            sh "curl https://grafana.com/api/dashboards/6417/revisions/1/download -o grafana_dashboard_kubernetes_cluster.json"
                            dashboardJSON =  sh(script: 'jq --arg id 0 --arg uid kcops --arg title "Kubernetes Cluster/ops" ".id=\\\$uid | .uid=\\\$uid | .title=\\\$title" grafana_dashboard_kubernetes_cluster.json | sed -e "s/\\\${DS_PROMETHEUS}/Prometheus_ops/g"',
                                                returnStdout: true).trim().replaceAll("\\.\$", "")
                            println "Creating dashboard:"
                            def requestJson = """
                            {
                                "folderId": 0,
                                "overwrite": false,
                                "dashboard": $dashboardJSON
                            }
                            """
                            sh "curl --verbose --user admin:${grafanaAdminPassword} http://${grafanaEndpoint}/api/dashboards/db -X POST -H 'Content-Type: application/json;charset=UTF-8' --data-binary '${requestJson}'"
                        }
                    }
                }
            }
        }
    }
}
