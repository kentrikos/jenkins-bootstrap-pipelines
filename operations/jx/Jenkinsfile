#!groovy

import groovy.json.JsonOutput

def helmRbacConfig = '''
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
'''
def ingValue = '''
rbac:
 create: true

controller:
 service:
   annotations:
     service.beta.kubernetes.io/aws-load-balancer-type: nlb
     service.beta.kubernetes.io/aws-load-balancer-internal: true
   enableHttp: true
   enableHttps: false
'''
def jxValueMap = [
        jenkins: [
                Master: [
                        InitContainerEnv: [],
                        ContainerEnv:[],
                        InstallPlugins: ["ssh-agent:1.17","aws-parameter-store:1.2.1"]
                ],
                Servers: [
                        Global: [
                                NumEnvVars: 8,
                                EnvVars   : [
                                        CONFIG_REPO_URL               : env.CONFIG_REPO_URL,
                                        JOB_REPO_URL                  : env.JOB_REPO_URL,
                                        AWS_REGION                    : env.AWS_REGION,
                                        AWS_OPERATIONS_ACCOUNT_NUMBER : env.AWS_OPERATIONS_ACCOUNT_NUMBER,
                                        AWS_APPLICATION_ACCOUNT_NUMBER: env.AWS_APPLICATION_ACCOUNT_NUMBER,
                                        PRODUCT_DOMAIN_NAME           : env.PRODUCT_DOMAIN_NAME,
                                        ENVIRONMENT_TYPE              : env.ENVIRONMENT_TYPE,

                                ]
                        ]
                ]
        ]
]

def r53WildcardRecord = [
    Comment: "Creating Alias resource record sets in Route 53",
    Changes: [[
        Action: "UPSERT",
            ResourceRecordSet: [
                Name: "",
                Type: "A",
                AliasTarget: [
                    HostedZoneId: "",
                    DNSName: "",
                    EvaluateTargetHealth: false
                ]
        ]
    ]]
]

def converterPy = '''
import yaml
import io
with open("data.yaml", 'r') as stream:
   data_loaded = yaml.load(stream)
with io.open('myvalues.yaml', 'w', encoding='utf8') as outfile:
   yaml.dump(data_loaded, outfile, default_flow_style=False, default_style='"')
'''
pipeline {

    agent any
    stages {
        stage('Git local config') {
            steps {
                sh 'git config --global --add user.name "example"'
                sh 'git config --global --add user.email "example@example.com"'
            }
        }
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }
        stage('Init helm') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    withProxyEnv() {
                        writeFile file: 'helm-rbac-config.yaml', text: helmRbacConfig
                        sh 'kubectl create -f helm-rbac-config.yaml ||true'
                        sh 'helm init --service-account tiller --wait --upgrade'
                    }
                }
            }
        }
        stage('Init k8s ingress') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    withProxyEnv() {
                        writeFile file: 'ing-values.yaml', text: ingValue
                        sh 'helm install --replace --wait --name jxing --namespace kube-system stable/nginx-ingress --set rbac.create=true --values ing-values.yaml||true'
                    }
                }
            }
        }
        stage('Create wildcard DNS record') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    withProxyEnv() {
                        script {
                            def parameters = readYaml file: 'jenkins/parameters.yaml'

                            println "Getting domain name"
                            def r53DomainName = sh(script: "aws route53 get-hosted-zone --id " + parameters.jxDomainHostedZoneID + " --output text --query 'HostedZone.Name'", 
                                                   returnStdout: true).trim()
                            r53WildcardRecord.Changes.ResourceRecordSet.Name = "*." + parameters.jxDomainAliasPrefix + "." + r53DomainName

                            println "Getting ingress NLB information"
                            ingressNLBAddress = sh(script: "kubectl get service -n kube-system jxing-nginx-ingress-controller -o json | jq -r '.status.loadBalancer.ingress[0].hostname'",
                                                   returnStdout: true).trim()
                            ingressNLBHostedZoneID = sh(script: "aws --region \$AWS_REGION elbv2 describe-load-balancers --query 'LoadBalancers[?DNSName==`" + ingressNLBAddress + "`].CanonicalHostedZoneId' --output text",
                                                   returnStdout: true).trim()
                            r53WildcardRecord.Changes.ResourceRecordSet.AliasTarget.HostedZoneId = ingressNLBHostedZoneID
                            r53WildcardRecord.Changes.ResourceRecordSet.AliasTarget.DNSName = ingressNLBAddress

                            println "Generating record for DNS update"
                            def r53WildcardRecordJSON = JsonOutput.toJson(r53WildcardRecord)
                            r53WildcardRecordJSON = JsonOutput.prettyPrint(r53WildcardRecordJSON)
                            writeFile file: 'jx_r53_alias.json', text: r53WildcardRecordJSON
                            sh "cat jx_r53_alias.json"

                            println "Creating/updating Route53 entry"
                            sh "aws route53 change-resource-record-sets --hosted-zone-id " + parameters.jxDomainHostedZoneID + " --change-batch file://jx_r53_alias.json"
                        }
                    }
                }
            }
        }
        stage('Install jx on k8s') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            script {
                                def parameters = readYaml file: 'jenkins/parameters.yaml'
                                URI url_http_proxy = new URI(env.http_proxy)
                                URI url_https_proxy = new URI(env.https_proxy)
                                def jenkins_no_proxy =  env.no_proxy.toString()
                                jxValueMap.jenkins.Master.InitContainerEnv = [[name: 'http_proxy', value: env.http_proxy],[name: 'https_proxy', value: env.http_proxy],[name: 'no_proxy', value: env.no_proxy],[name: 'jenkins_proxy_http', value: url_http_proxy?.getHost()],[name: 'jenkins_proxy_http_port', value:  url_http_proxy?.getPort().toString()],[name: 'jenkins_no_proxy_list', value: jenkins_no_proxy.split(',').join('\\n')]]
                                jxValueMap.jenkins.Master.ContainerEnv = [[name: 'http_proxy', value: env.http_proxy],[name: 'https_proxy', value: env.http_proxy],[name: 'no_proxy', value: env.no_proxy],[name: 'jenkins_proxy_http', value: url_http_proxy?.getHost()],[name: 'jenkins_proxy_http_port', value:  url_http_proxy?.getPort().toString()],[name: 'jenkins_no_proxy_list', value: jenkins_no_proxy.split(',').join('\\n')]]
                                jxValueMap.jenkins.Master.JavaOpts='-Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Djenkins.displayurl.provider=org.jenkinsci.plugins.blueoceandisplayurl.BlueOceanDisplayURLImpl -Dhttp.proxyHost='+ url_http_proxy?.getHost()+' -Dhttp.proxyPort='+ url_http_proxy?.getPort()
                                writeYaml file: 'data.yaml', data: jxValueMap
                                writeFile file: 'convert.py', text: converterPy
                                sh 'python -u convert.py'
                                // This next line is to change in file myvalues.yaml from \\n to \n and we need sed with s/\\\\/\\/g written as below due to interpolation done by groovy.
                                sh 'sed -i "s/\\\\\\\\\\\\\\\\/\\\\\\\\/g" myvalues.yaml '
                                sh 'jx install -b --headless --default-admin-password ' + parameters.defaultAdminPassword + ' --domain="' + parameters.jxDomain + '" --verbose=true --provider=kubernetes --no-default-environments --git-username=' + parameters.gitUsername + ' --git-api-token ' + parameters.gitApiToken + ' --git-provider-url="' + parameters.gitProviderUrl + '"'                            }
                        }
                    }
                }
            }
        }
    }
}

void withProxyEnv(List envVars = [], def body) {
    List proxies = []
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'absolute', path: '/proxy', recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPS) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)
    withEnv(envVaraibles) {
        body.call()
    }
}
